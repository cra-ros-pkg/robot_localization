#include <ros/ros.h>
#include <nav_msgs/Odometry.h>
#include "std_msgs/String.h"
#include <iostream>
#include <fstream>
#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <unistd.h>

void plot_data();
 void callback(const nav_msgs::Odometry::ConstPtr& msg)
   {
      std::fstream file;
    file.open("test.txt", std::ios::out);
    file<<msg->pose.pose.position.x<<" "<<msg->pose.pose.position.y<<" "<<msg->twist.twist.angular.z<<"\n";
    std::cout<<"Got data: "<<sin(msg->twist.twist.angular.z)<<"\n";
    file.close();
    plot_data();
    usleep(100);
    //file.close();
   }

int main(int argc, char **argv){
    ros::init(argc, argv, "plot_pub");
    ros::NodeHandle nh;
    ros::Subscriber sub = nh.subscribe("/wheel_odometry", 1000, callback);
    ros::spin();

    return 0;
}


using namespace std;

void plot_data(){
    ifstream file;
    file.open("test.txt");
    float x, y, yaw, to_x, to_y;
    file>>x>>y>>yaw;
    file.close();
    to_x = x + x/10*cos(yaw);
    to_y = y + x/10*sin(yaw);
    //char x_char[10], y_char[10], to_x_char[10], to_y_char[10];
    //sprintf(x_char, "%f", x);
    //sprintf(y_char, "%f", y);
    //sprintf(to_x_char, "%f", to_x);
    //sprintf(to_y_char, "%f", to_y);
    //cout<<to_x_char<<to_y_char<<endl;
   // char * commandsForGnuplot[] = {"set arrow from %s,2 to 3,5", x_char, "plot 'test.txt' with lines ";
   char * comman = {"plot 'test.txt' with lines"};
	FILE * gnuplotPipe = popen ("gnuplot -persistent", "w");
    int i  ;
	//for (i=0; i < 2; i++){
		//fprintf(gnuplotPipe, "%s \n", commandsForGnuplot[i]); //Send commands to gnuplot one by one.
        fprintf(gnuplotPipe, "set arrow from %f, %f to %f, %f\n%s\n", x, y, to_x, to_y, comman);
		fflush(gnuplotPipe);
	//}
	//system("pause");
}

